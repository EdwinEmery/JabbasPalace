Matrix::Matrix(int _rows, int _cols)
{
    rows = _rows;
    cols = _cols;
    a.resize(rows, cols);
    for(int i = 0; i<rows; i++)
    {
        for(int j = 0; j<cols; j++)
        {
            a(i,j) = 0;
        }
    }
    return a;
}

Matrix operator+(const Matrix& a, const Matrix& b)
{
    if (a.size().size() != b.size().size()) cout << "error!" ; return 0; ///quit?
    Matrix c(a.rows, a.cols);
    for(int i = 0; i<rows; i++)
    {
        for(int j = 0; j<cols; j++)
        {
            c(i, j)= a(i, j) + b(i, j);
        }
    }
    return c;
}
Matrix operator*(const Matrix& a, const Matrix& b)
{
    if (a.getCols() != b.getRows()) cout << "error!"; ///quit
    Matrix c(a.rows, a.cols);
    //Let the outermost loop control k, the column index for b
    for(int k = 0; k < b.getRows(); k++)
    {
        //Let the next loop in control i, the row for a
        for(int i = 0; i < a.getRows(); i++)
        {
                //The innermost loop will control j, which will determine which column to use from a and which row to use from b.
                for(int j = 0; j < a.getRows(); j++)
                {
                    c(i, k) += a(j, i)*b(j, k);
                }
        }
    }
}
bool operator==(const Matrix& a, const Matrix& b)
/*If the rows and columns are not equal, return false
If any element (i,j) does not match, return false
Otherwise return true*/
{
    if(a.rows != b.rows) return false; //FIXME
    if(a.cols != b.cols) return false;
    for(int i = 0; i<rows; i++)
    {
        for(int j = 0; j<cols; j++)
        {
            if (a(i, j) != b(i, j));
        }
    }
    return true;
}
